name: Build
on:
  push:
    branches:
      - main # the name of your main branch
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: build-and-test # will probably have to setup java first
        run: |
          mvn clean package
      # - name: scan-maven-with-sonar-clound
      #   uses: sonarsource/sonarcloud-github-action@master
      #   env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     projectBaseDir: ./microservice/
      #     args: >
      #       -Dsonar.projectKey=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2) # projecct key is the name of the repository
      #       -Dsonar.organization="mehrdad-ordobadi" # check if the value is correct
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      #       -Dsonar.host.url=https://sonarcloud.io
      - name: Scan Maven project with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORG_KEY: mehrdad-ordobadi
        run: |
          PROJECT_KEY=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "project key is $PROJECT_KEY"
          # PROJECT_KEY="maven-w-sonar"
          mvn sonar:sonar \
            -Dsonar.projectKey=$PROJECT_KEY \
            -Dsonar.organization=${{ env.SONAR_ORG_KEY }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ env.SONAR_TOKEN }}
      
      - name: Build Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2):${{ github.sha }}
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          docker build -t $IMAGE_NAME .
          
      - name: scan-image-with-trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2):${{ github.sha }}
          format: 'json'
          severity: 'HIGH,CRITICAL,UNKNOWN' # check if this is the right severity level - webhooks might not accept long reports
          hide-progress: true
          exit-code: 0 # set to zero for testing purposes
          output: 'image-report.json' # adjust based on how you want the report to be handled
      
      - name: summarize-and-format-trivy-image-scan-results
        run: |
          apt update && apt install -y jq
          JSON_TF_PAYLOAD=$(jq -r '.Results[] | .Vulnerabilities[] | \
            "- Severity: \(.Severity), ID: \(.VulnerabilityID), Package: \(.PkgName)\n"' \
            terraform-report.json | jq -Rs '{text: "Trivy Terraform Scan Summary", \
            attachments: [{text: "Scan Summary", \
            fields: [{title: "Scan Summary", value: ., short: false}]}]}')
          echo "IMAGE_SCAN_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$JSON_TF_PAYLOAD" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: echo-scan-summary
        run: echo "$IMAGE_SCAN_SUMMARY"

      - name: Push Docker image to registry
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2):${{ github.sha }}

